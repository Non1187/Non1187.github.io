<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AI框架安全毕设</title>
    <link href="/2023/01/16/AI%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8%E6%AF%95%E8%AE%BE/"/>
    <url>/2023/01/16/AI%E6%A1%86%E6%9E%B6%E5%AE%89%E5%85%A8%E6%AF%95%E8%AE%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="CVE复现问题"><a href="#CVE复现问题" class="headerlink" title="CVE复现问题"></a>CVE复现问题</h3><p>可以先找便于复现的漏洞处理</p><p>先找有CVE编号的漏洞，在NVD里找官方的POC ——没找到，最后还是github的security文件夹里面对部分安全问题有小块的POC</p><p>感觉信息检索和分析处理能力也是比较重要的，上层的能力</p><h3 id="调查过程"><a href="#调查过程" class="headerlink" title="调查过程"></a>调查过程</h3><h3 id="思考内容"><a href="#思考内容" class="headerlink" title="思考内容"></a>思考内容</h3><ol><li><p>分析研究对象时最好看下各个框架。如果某个框架分析得比较好还可以考虑向底层进行挖掘。所以可以先从TensorFlow开始。</p><p>当时学长也提示了，可以对各可能得方向进行分析。</p></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>毕设</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pwnable.tw题目记录</title>
    <link href="/2022/05/04/pwnable.tw/"/>
    <url>/2022/05/04/pwnable.tw/</url>
    
    <content type="html"><![CDATA[<p>记录部分pwnable.tw上的题目。</p><h2 id="silver-bullet"><a href="#silver-bullet" class="headerlink" title="silver_bullet"></a>silver_bullet</h2><h4 id="0-文件分析"><a href="#0-文件分析" class="headerlink" title="0 文件分析"></a>0 文件分析</h4><p>仍然给了两个文件</p><p>libc_32.so.6是之前的那个版本的glibc 2.23，试试直接从glibc_allinone里面找到了那个版本的libc库文件</p><p>​    i386的glibc 2.23库文件有两种，之前下的是<code>2.23-0ubuntu11.3_i386</code>，又下了一个<code>2.23-0ubuntu3_i386</code> 发现版本不一样。</p><p>​    但是用那个库的解释器是可以运行题目给的libc文件的。</p><p>查看ELF文件，是32位文件，动态链接，没有strip调试信息</p><p>checksec，没有开canary和PIE</p><p>​    哪里有一个开了PIE的题目(？)</p><h4 id="1-流程分析"><a href="#1-流程分析" class="headerlink" title="1 流程分析"></a>1 流程分析</h4><p>分析程序流程，是一个用银子弹打狼人的程序。具体的菜单中的选项比较清楚</p><p>power_up函数的14行存在一个漏洞，strncat可能将main函数中的dest[48]覆盖为0，导致15行v3的计算结果仅为strlen(s)。</p><p>利用该效果打倒狼人：</p><ul><li>创建内容为“A”*47的bullet</li><li>进行power_up，新增长度为1的内容，将长度字段覆盖为0(仅覆盖了尾部一个字节)，然后v3仅为1</li><li>进行power_up，可以新增长度为47的内容，因此将长度字段覆盖为全F</li><li>进行beat，攻击两次可以打倒狼人。</li></ul><h4 id="2-漏洞及攻击方法"><a href="#2-漏洞及攻击方法" class="headerlink" title="2 漏洞及攻击方法"></a>2 漏洞及攻击方法</h4><p>在<strong>1</strong>的第3步中strncat将在s[47]再向后加两个字节处开始覆盖。可以覆盖的返回地址数量为40字节，可以放置10个Gadget</p><p>覆盖完毕后还需要执行完毕beat，然后才可以返回</p><ul><li>创建内容为“A”*47的bullet</li><li>进行power_up，新增长度为1的内容，将长度字段覆盖为0，然后v3仅为1</li><li>进行power_up，可以新增长度为47的内容，因此将长度字段覆盖为除结尾的0x01外全F，同时将返回地址覆盖为Gadget，然后v3计算结果仍为负值</li><li>进行beat，攻击两次可以打倒狼人。</li></ul><h4 id="3-调试"><a href="#3-调试" class="headerlink" title="3 调试"></a>3 调试</h4><p>处理recv的编写，编写exp内menu中操作的函数时，函数的封装仅考虑程序中对应的部分，不添加多余的recv</p><p>以及解决”其他”中的问题</p><p>最后exp.py可以运行，获得flag</p><p><a href="https://imgtu.com/i/OZPARf"><img src="https://s1.ax1x.com/2022/05/04/OZPARf.png" alt="OZPARf.png" style="zoom:67%;" /></a></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>strncat strcat等函数会在修改后dest字符串的结尾增加空字符null。</p><p>strncat strcat等函数会在0x00处截断</p><p>设置libc的基址时，用到的属性为libc.address</p><p>这道题目，如果用64位好像就做不了了</p><p>​    改成PIE好像也做不了</p><p>​    能做吗… ?</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn中的堆利用</title>
    <link href="/2022/05/03/Pwn%E4%B8%AD%E7%9A%84%E5%A0%86%E5%88%A9%E7%94%A8/"/>
    <url>/2022/05/03/Pwn%E4%B8%AD%E7%9A%84%E5%A0%86%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>记录一下pwn题目中的堆利用方法，待填坑。</p><p>根据ctf-wiki的描述进行一些总结。</p><h5 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h5><h5 id="Off-By-One"><a href="#Off-By-One" class="headerlink" title="Off-By-One"></a>Off-By-One</h5><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>[1]  <a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/introduction/">堆利用 - CTF Wiki (ctf-wiki.org)</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn题目的docker部署</title>
    <link href="/2022/04/14/Pwn%E9%A2%98%E7%9B%AE%E7%9A%84docker%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/04/14/Pwn%E9%A2%98%E7%9B%AE%E7%9A%84docker%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>根据助教老师的提示，使用ctf_xinetd框架</p><p>使用README.md中的方法，无法复现：原可执行程序的功能是打印”Hello ctf_xinetd”之后开shell，但是开容器后，用nc连接时没有Hello信息，可以正常开shell。</p><p>执行exit无法直接退出，反而打印了Hello信息。然后多次键入回车后会退出。推测多次键入回车是退出时的确认。</p><p>因此将打印信息删除了，直接进行注入和执行。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pwn中shellcode的构建及调用规范</title>
    <link href="/2022/04/13/Pwn%E4%B8%ADshellcode%E7%9A%84%E6%9E%84%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <url>/2022/04/13/Pwn%E4%B8%ADshellcode%E7%9A%84%E6%9E%84%E5%BB%BA%E5%8F%8A%E8%B0%83%E7%94%A8%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>值得注意的是，通过<code>execve(&#39;/bin/sh&#39;,0,0)</code>的方式调用shell，只对于zsh之外的shell有作用。</p><p>一般的方法为，使用<code>execve(&#39;/bin/sh&#39;,0,0)</code>调用shell。并且需要注意，该方案只对于zsh之外的shell有作用。(zsh好像破事一直比较多)</p><p>32位shellcode:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs assembly">xor    ecx,ecx;<br>mul    ecx;<br>push   ecx;<br>push   0x68732f2f;<br>push   0x6e69622f;<br>mov    ebx,esp;<br>mov    al,0xb;<br>int    0x80;<br></code></pre></td></tr></table></figure><p>32位机器的系统调用，调用号在EAX，前面的参数依次在EBX, ECX, EDX</p><p>其中，<code>mul ecx;</code>指令的作用为<code>EDX:EAX &lt;-- EAX * r/m32</code>，将EDX和EAX清零。</p><p>进行普通过程调用时，参数放在栈上</p><p>64位shellcode：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">xor     rdx, rdx;<br>mov     rbx, 0x68732f2f6e69622f;<br>push rbx;<br>mov     rdi, rsp;<br>xor rax, rax;<br>push    rdx;<br>mov     rsi, rsp;<br>mov rdx, rsp;<br>mov     al, 0x3b;<br>syscall;<br></code></pre></td></tr></table></figure><p>64位机器系统调用，调用号在RAX，前面的参数依次在RDI, RSI, RDX, RCX</p><p>假设开始时rax为零了</p><p>且rcx为零不需要保证</p><p>进行普通过程调用时，参数依次放在RDI, RSI, RDX, RCX。</p><p>构建时，使用context(os&#x3D;’linux’, arch&#x3D;’amd64’, bits&#x3D;’64’)设置环境，然后用asm(shellcraft.sh())构造shellcode。也可以用asm([汇编代码])生成shellcode。</p><p>使用pwntools可以把其中的AT&amp;T转换成intel风格。</p><p>使用gcc选择汇编格式生成汇编代码，使用选项-masm&#x3D;intel。</p><p>使用objdump选择汇编格式，用&#96;objdump -M intel -d &lt;执行档&gt; </p><p>再次强调，该方法为使用<code>execve(&#39;/bin/sh&#39;,0,0)</code>调用shell。并且需要注意，该方案只对于zsh之外的shell有作用。(zsh好像破事一直比较多)</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>UCASCheer</title>
    <link href="/2022/03/03/UCASCheer/"/>
    <url>/2022/03/03/UCASCheer/</url>
    
    <content type="html"><![CDATA[<p>Welcome to UCASCheer!</p><p>刚学会搭建网站，初来乍到请谅解。 后期本人会努力进行一些优化的</p><p>譬如首页的打印机招牌，正在思考修改或去掉的方案（</p><p>感谢浏览本站！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
